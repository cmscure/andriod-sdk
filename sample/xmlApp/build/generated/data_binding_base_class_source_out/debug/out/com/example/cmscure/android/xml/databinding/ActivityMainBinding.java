// Generated by view binder compiler. Do not edit!
package com.example.cmscure.android.xml.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.cmscure.sdk.ui.CureColorView;
import com.cmscure.sdk.ui.CureImageView;
import com.cmscure.sdk.ui.CureTextView;
import com.example.cmscure.android.xml.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton buttonGetStarted;

  @NonNull
  public final Button buttonManualRefresh;

  @NonNull
  public final LinearLayout cardCta;

  @NonNull
  public final CureColorView colorBadge;

  @NonNull
  public final LinearLayout containerFeaturedProducts;

  @NonNull
  public final CureImageView imageHero;

  @NonNull
  public final CureImageView imageSecondary;

  @NonNull
  public final Spinner spinnerLanguages;

  @NonNull
  public final CureTextView textCtaHint;

  @NonNull
  public final CureTextView textCtaTitle;

  @NonNull
  public final CureTextView textFeaturedProducts;

  @NonNull
  public final CureTextView textHeadline;

  @NonNull
  public final CureTextView textHeroBody;

  @NonNull
  public final CureTextView textHeroSubtitle;

  @NonNull
  public final CureTextView textLanguageLabel;

  @NonNull
  public final CureTextView textPaletteTitle;

  @NonNull
  public final TextView textUpdateEvents;

  @NonNull
  public final LinearLayout valuePropCard;

  private ActivityMainBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton buttonGetStarted, @NonNull Button buttonManualRefresh,
      @NonNull LinearLayout cardCta, @NonNull CureColorView colorBadge,
      @NonNull LinearLayout containerFeaturedProducts, @NonNull CureImageView imageHero,
      @NonNull CureImageView imageSecondary, @NonNull Spinner spinnerLanguages,
      @NonNull CureTextView textCtaHint, @NonNull CureTextView textCtaTitle,
      @NonNull CureTextView textFeaturedProducts, @NonNull CureTextView textHeadline,
      @NonNull CureTextView textHeroBody, @NonNull CureTextView textHeroSubtitle,
      @NonNull CureTextView textLanguageLabel, @NonNull CureTextView textPaletteTitle,
      @NonNull TextView textUpdateEvents, @NonNull LinearLayout valuePropCard) {
    this.rootView = rootView;
    this.buttonGetStarted = buttonGetStarted;
    this.buttonManualRefresh = buttonManualRefresh;
    this.cardCta = cardCta;
    this.colorBadge = colorBadge;
    this.containerFeaturedProducts = containerFeaturedProducts;
    this.imageHero = imageHero;
    this.imageSecondary = imageSecondary;
    this.spinnerLanguages = spinnerLanguages;
    this.textCtaHint = textCtaHint;
    this.textCtaTitle = textCtaTitle;
    this.textFeaturedProducts = textFeaturedProducts;
    this.textHeadline = textHeadline;
    this.textHeroBody = textHeroBody;
    this.textHeroSubtitle = textHeroSubtitle;
    this.textLanguageLabel = textLanguageLabel;
    this.textPaletteTitle = textPaletteTitle;
    this.textUpdateEvents = textUpdateEvents;
    this.valuePropCard = valuePropCard;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonGetStarted;
      MaterialButton buttonGetStarted = ViewBindings.findChildViewById(rootView, id);
      if (buttonGetStarted == null) {
        break missingId;
      }

      id = R.id.buttonManualRefresh;
      Button buttonManualRefresh = ViewBindings.findChildViewById(rootView, id);
      if (buttonManualRefresh == null) {
        break missingId;
      }

      id = R.id.cardCta;
      LinearLayout cardCta = ViewBindings.findChildViewById(rootView, id);
      if (cardCta == null) {
        break missingId;
      }

      id = R.id.colorBadge;
      CureColorView colorBadge = ViewBindings.findChildViewById(rootView, id);
      if (colorBadge == null) {
        break missingId;
      }

      id = R.id.containerFeaturedProducts;
      LinearLayout containerFeaturedProducts = ViewBindings.findChildViewById(rootView, id);
      if (containerFeaturedProducts == null) {
        break missingId;
      }

      id = R.id.imageHero;
      CureImageView imageHero = ViewBindings.findChildViewById(rootView, id);
      if (imageHero == null) {
        break missingId;
      }

      id = R.id.imageSecondary;
      CureImageView imageSecondary = ViewBindings.findChildViewById(rootView, id);
      if (imageSecondary == null) {
        break missingId;
      }

      id = R.id.spinnerLanguages;
      Spinner spinnerLanguages = ViewBindings.findChildViewById(rootView, id);
      if (spinnerLanguages == null) {
        break missingId;
      }

      id = R.id.textCtaHint;
      CureTextView textCtaHint = ViewBindings.findChildViewById(rootView, id);
      if (textCtaHint == null) {
        break missingId;
      }

      id = R.id.textCtaTitle;
      CureTextView textCtaTitle = ViewBindings.findChildViewById(rootView, id);
      if (textCtaTitle == null) {
        break missingId;
      }

      id = R.id.textFeaturedProducts;
      CureTextView textFeaturedProducts = ViewBindings.findChildViewById(rootView, id);
      if (textFeaturedProducts == null) {
        break missingId;
      }

      id = R.id.textHeadline;
      CureTextView textHeadline = ViewBindings.findChildViewById(rootView, id);
      if (textHeadline == null) {
        break missingId;
      }

      id = R.id.textHeroBody;
      CureTextView textHeroBody = ViewBindings.findChildViewById(rootView, id);
      if (textHeroBody == null) {
        break missingId;
      }

      id = R.id.textHeroSubtitle;
      CureTextView textHeroSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (textHeroSubtitle == null) {
        break missingId;
      }

      id = R.id.textLanguageLabel;
      CureTextView textLanguageLabel = ViewBindings.findChildViewById(rootView, id);
      if (textLanguageLabel == null) {
        break missingId;
      }

      id = R.id.textPaletteTitle;
      CureTextView textPaletteTitle = ViewBindings.findChildViewById(rootView, id);
      if (textPaletteTitle == null) {
        break missingId;
      }

      id = R.id.textUpdateEvents;
      TextView textUpdateEvents = ViewBindings.findChildViewById(rootView, id);
      if (textUpdateEvents == null) {
        break missingId;
      }

      id = R.id.valuePropCard;
      LinearLayout valuePropCard = ViewBindings.findChildViewById(rootView, id);
      if (valuePropCard == null) {
        break missingId;
      }

      return new ActivityMainBinding((ScrollView) rootView, buttonGetStarted, buttonManualRefresh,
          cardCta, colorBadge, containerFeaturedProducts, imageHero, imageSecondary,
          spinnerLanguages, textCtaHint, textCtaTitle, textFeaturedProducts, textHeadline,
          textHeroBody, textHeroSubtitle, textLanguageLabel, textPaletteTitle, textUpdateEvents,
          valuePropCard);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
